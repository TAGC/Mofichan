using System;
using System.Threading;
using System.Threading.Tasks;
using Mofichan.Core.Interfaces;
using PommaLabs.Thrower;
using Serilog;

namespace Mofichan.Core
{
    /// <summary>
    /// A type of <see cref="IPulseDriver"/> that generates pulses at a configurable, regular
    /// interval.
    /// <para></para>
    /// Instances of this class act as the lifeblood that drives all of Mofichan's behaviours.
    /// </summary>
    public class Heart : IPulseDriver, IDisposable
    {
        private readonly ILogger logger;
        private readonly CancellationTokenSource cancellationTokenSource;
        private readonly Task stepperTask;

        private bool disposed;
        private TimeSpan heartRate;

        /// <summary>
        /// Initializes a new instance of the <see cref="Heart"/> class.
        /// </summary>
        /// <param name="logger">The logger.</param>
        public Heart(ILogger logger)
        {
            Raise.ArgumentNullException.IfIsNull(logger, nameof(logger));

            this.logger = logger.ForContext<Heart>();
            this.cancellationTokenSource = new CancellationTokenSource();
            this.stepperTask = this.PulsePeriodicallyAsync(this.cancellationTokenSource.Token);
        }

        /// <summary>
        /// Occurs when a pulse is generated by this driver.
        /// </summary>
        public event EventHandler PulseOccurred;

        /// <summary>
        /// Gets or sets Mofichan's heart rate; the rate at which pulses are generated.
        /// </summary>
        /// <value>
        /// Mofichan's heart rate.
        /// </value>
        public TimeSpan Rate
        {
            get
            {
                return this.heartRate;
            }

            set
            {
                this.logger.Information("Setting heart rate={HeartRate}", value);
                this.heartRate = value;
            }
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose()
        {
            if (this.disposed)
            {
                return;
            }

            this.cancellationTokenSource.Cancel();
            this.stepperTask.Wait();
            this.disposed = true;
        }

        private async Task PulsePeriodicallyAsync(CancellationToken token)
        {
            long iteration = 0;

            while (!token.IsCancellationRequested)
            {
                iteration++;

                if (this.Rate == TimeSpan.Zero)
                {
                    await Task.Delay(50);
                    continue;
                }

                try
                {
                    await Task.Delay(this.Rate, token);
                }
                catch (TaskCanceledException)
                {
                    return;
                }

                this.PulseOccurred?.Invoke(this, EventArgs.Empty);

                if (iteration % 100 == 0)
                {
                    this.logger.Debug("Pulse: {Iteration}", iteration);
                }
            }
        }
    }
}